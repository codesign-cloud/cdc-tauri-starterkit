name: Release Tauri App

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      cert_subject:
        description: 'Certificate subject (e.g., CN=YourCompany)'
        required: false
        default: 'CN=Tauri Developer'
      cert_organization:
        description: 'Organization name'
        required: false
        default: 'Tauri App Developer'
      cert_country:
        description: 'Country code (e.g., US, GB, DE)'
        required: false
        default: 'US'
      use_self_signed:
        description: 'Use self-signed certificate for signing'
        required: false
        default: true
        type: boolean

env:
  # Default certificate configuration (can be overridden by workflow_dispatch inputs)
  CERT_SUBJECT: ${{ github.event.inputs.cert_subject || 'CN=Tauri Developer' }}
  CERT_ORGANIZATION: ${{ github.event.inputs.cert_organization || 'Tauri App Developer' }}
  CERT_COUNTRY: ${{ github.event.inputs.cert_country || 'US' }}
  USE_SELF_SIGNED: ${{ github.event.inputs.use_self_signed || 'true' }}

jobs:
  release:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        platform: [windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Build Next.js frontend
        run: npm run build

      - name: Create Self-Signed Certificate
        if: env.USE_SELF_SIGNED == 'true'
        shell: powershell
        run: |
          Write-Host "Creating self-signed certificate..."
          Write-Host "Subject: $env:CERT_SUBJECT"
          Write-Host "Organization: $env:CERT_ORGANIZATION"
          Write-Host "Country: $env:CERT_COUNTRY"
          
          # Create self-signed code signing certificate
          $cert = New-SelfSignedCertificate `
            -Type CodeSigningCert `
            -Subject "$env:CERT_SUBJECT" `
            -KeyAlgorithm RSA `
            -KeyLength 2048 `
            -Provider "Microsoft Enhanced RSA and AES Cryptographic Provider" `
            -KeyExportPolicy Exportable `
            -KeyUsage DigitalSignature `
            -NotAfter (Get-Date).AddYears(3) `
            -CertStoreLocation "Cert:\CurrentUser\My"
          
          Write-Host "Certificate created with thumbprint: $($cert.Thumbprint)"
          
          # Export to PFX file
          $password = ConvertTo-SecureString -String "github-actions-cert-2024" -Force -AsPlainText
          $pfxPath = "self-signed-cert.pfx"
          Export-PfxCertificate -Cert $cert -FilePath $pfxPath -Password $password
          
          # Convert to base64 for environment variable
          $certBytes = [IO.File]::ReadAllBytes($pfxPath)
          $certBase64 = [Convert]::ToBase64String($certBytes)
          
          # Set environment variables for next steps
          echo "SIGNING_CERT_BASE64=$certBase64" >> $env:GITHUB_ENV
          echo "SIGNING_CERT_PASSWORD=github-actions-cert-2024" >> $env:GITHUB_ENV
          echo "CERT_CREATED=true" >> $env:GITHUB_ENV
          
          # Clean up PFX file
          Remove-Item $pfxPath -Force
          
          Write-Host "‚úÖ Self-signed certificate ready for signing"

      - name: Get package version
        id: package-version
        shell: bash
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Check if tag exists
        id: check-tag
        shell: bash
        run: |
          if git rev-parse "v${{ steps.package-version.outputs.version }}" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.package-version.outputs.version }} already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Tag v${{ steps.package-version.outputs.version }} does not exist"
          fi

      - name: Build Tauri app
        if: steps.check-tag.outputs.exists == 'false'
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Use self-signed certificate if created, otherwise use secrets (for real certificates)
          TAURI_SIGNING_PRIVATE_KEY: ${{ env.CERT_CREATED == 'true' && env.SIGNING_CERT_BASE64 || secrets.WINDOWS_CERTIFICATE }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ env.CERT_CREATED == 'true' && env.SIGNING_CERT_PASSWORD || secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        with:
          tagName: v${{ steps.package-version.outputs.version }}
          releaseName: 'Release v${{ steps.package-version.outputs.version }}'
          releaseBody: |
            ## What's Changed
            
            Release of version ${{ steps.package-version.outputs.version }}
            
            ### Features
            - Tauri + Next.js application
            - **Code-signed Windows executable** üîê
            - Windows installer included
            
            ### Certificate Information
            ${{ env.CERT_CREATED == 'true' && '‚ö†Ô∏è **Self-signed certificate** - You may see security warnings on first run' || '‚úÖ **Digitally signed** - Trusted certificate authority' }}
            
            ### Installation
            Download the appropriate installer for your platform from the assets below.
            
            ${{ env.CERT_CREATED == 'true' && '**Note**: This build uses a self-signed certificate. Windows may show security warnings. This is normal for development builds.' || '' }}
          releaseDraft: false
          prerelease: false
          includeDebug: false
          includeRelease: true

      - name: Skip release (tag exists)
        if: steps.check-tag.outputs.exists == 'true'
        run: |
          echo "Skipping release because tag v${{ steps.package-version.outputs.version }} already exists"
          echo "If you want to create a new release, please update the version in package.json"